# deoplete------------------

#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_post_source = '''
#  let g:deoplete#enable_at_startup = 1
#  "let g:deoplete#auto_complete_delay = 0
#'''

#[[plugins]]
#repo = 'roxma/nvim-yarp'
#
#[[plugins]]
#repo = 'roxma/vim-hug-neovim-rpc'

#--------------------------

# ddc.vim------------------

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
  call ddc#custom#patch_global('sources', [
      \ 'around',
      \ 'file',
      \ 'nvim-lsp'
      \ ])

  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'],
      \   'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {'mark': 'Around'},
      \ 'file': {
      \   'mark': 'file',
      \   'isVolatile': v:true,
      \   'forceCompletionPattern': '\S/\S*',
      \ },
      \ 'nvim-lsp': {
      \   'mark': 'LSP',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ },
      \ })

   call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

   " Use Customized labels
   call ddc#custom#patch_global('sourceParams', {
      \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
      \ })

  " pum.vim setting
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  inoremap <silent><expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e> <Cmd>call pum#map#cancel()<CR>

  call ddc#enable()
'''

[[plugins]]
# ポップアップウィンドウを表示する
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

[[plugins]]
# カーソル周辺の既出単語を保管するソース
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
# ファイル名を補完するソース
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
# 入力中の単語を補完の対象にするフィルタ
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
# 補完候補をソートするフィルタ
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
# 補完候補の重複を防ぐフィルタ
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

# LSP settings=============================
[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
#on_source = 'ddc.vim'
on_source = 'vim-vsnip' # これ大事

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
#on_event = 'InsertEnter'
on_source = 'nvim-lspconfig'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_source = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'nvim-lspconfig'
hook_source = '''
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

[[plugins]]
 repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
  lua << EOF
  local nvim_lsp = require('lspconfig')
  local on_attach = function (client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  local opts = { noremap=true, silent=true }
   buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
   buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
   buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
   buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
   buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
   buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
   buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
   buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  end

  -- capabilitiesの設定でスニペットが効くはずだが、うまく行かない
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  local lsp_installer = require("nvim-lsp-installer")
  lsp_installer.on_server_ready(function(server)
   local opts = {}
   opts.on_attach = on_attach
   opts.capabilities = capabilities
   server:setup(opts)
   vim.cmd [[ do User LspAttachBuffers ]]
  end)

EOF
'''

[[plugins]]
repo ='williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''
# ======================================
#--------------------------
